# шаблон SonOff Basic (c допаянными I2C) + PZEM-004T-100A + DS18B20
# в качестве контролера нагрева накопительного водонагревателя
# с автоотключением при перегрузке (

esphome:
  name: $devicename
  on_boot:
    priority: 600
    then:
       # восстановление данных из флеша при загрузке
       - lambda: |-
          {
             uint16_t temp=id(store_mode);
             if(id(store_auto)){
                id(${low_devicename}_auto).turn_on();
             } else {
                id(${low_devicename}_auto).turn_off();
             }
             id(store_mode)=temp;
          }
          uint8_t min=id(store_on_time)%60;
          uint8_t hou=id(store_on_time)/60;
          {
             auto call = id(${low_devicename}_on_minutes).make_call();
             call.set_value(min);
             call.perform();
          }
          {
             auto call = id(${low_devicename}_on_hours).make_call();
             call.set_value(hou);
             call.perform();
          }
          min=id(store_off_time)%60;
          hou=id(store_off_time)/60;
          {
             auto call = id(${low_devicename}_off_minutes).make_call();
             call.set_value(min);
             call.perform();
          }
          {
             auto call = id(${low_devicename}_off_hours).make_call();
             call.set_value(hou);
             call.perform();
          }
          id(${low_devicename}_hide_notes).publish_state(false);
          id(${low_devicename}_operation_manual).publish_state(id(store_mode)!=0);
       - script.execute: script_show_text
       
esp8266:
  board: esp01_1m
  restore_from_flash: true

preferences:
  flash_write_interval: 10sec #1min
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  #manual_ip:
  #  static_ip: ${wifi_ip}
  #  gateway: !secret gateway 
  #  subnet: !secret subnet
  #  dns1: !secret dns1
  #  dns2: !secret dns2
  ap:
    ssid:  ${upper_devicename} Hotspot
    password: !secret ap_wifi_pass

logger:
    level: DEBUG
    baud_rate: 0
    
api:

#mqtt:
#  broker: <Broker IP>
#  discovery: True

ota:
  password: !secret ota_pass

captive_portal:
    
web_server:
  port: 80
  auth:
    username: !secret web_user
    password: !secret web_pass

uart:
  rx_pin: RX
  tx_pin: TX
  baud_rate: 9600
  
# переменные для сохранения во флеше
globals:
  # храним настройку слайдера времени начала нагрева
  - id: store_on_time
    type: int
    restore_value: yes
    initial_value: '0'  
  # храним настройку слайдера времени конца нагрева
  - id: store_off_time
    type: int
    restore_value: yes
    initial_value: '0'  
  # храним настройку переключателя режима работы по времени или вручную
  - id: store_auto
    type: bool
    restore_value: yes
    initial_value: '0'  
  # храним режим работы до нажатия физической кнопки на устройстве, для восстановления после переключения
  - id: store_mode
    type: int
    restore_value: yes
    initial_value: '0'  

binary_sensor:
#статус подключения устройства к HA
  - platform: status
    name: ${upper_devicename} HA Connected
    id: ${low_devicename}_status
# кнопка на корпусе устройства
  - platform: gpio  
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    id: button
    internal: true
    on_click:
#короткое нажатие на кнопку  
    - min_length: 10ms
      max_length: 1000ms
      then:
        - lambda: |-
           uint8_t temp=0;
           if(id(store_mode)==0){ // ручная кнопка не была нажата
              ESP_LOGD("This","Set manual mode to ON, from button.");
              id(script_set_manual).execute();
           } else { // есть сохраненный режим работы, значит кнопка нажималась, будем восстанавливать сохраненный режим
              ESP_LOGD("This","Revert manual mode to OFF, from button. Restore modes and dest. temperature.");
              id(script_revert_manual).execute();
           }

# restart esp , нужно зажать кнопку на 5000 секунд (ПОСЧИТАТЬ ДО 8)
    - min_length: 4000ms
      max_length: 6000ms
      then:
        - switch.toggle: ${low_devicename}_restart_sw
# индикатор срабатывания защиты и отключения реле
  - platform: template
    device_class: safety
    icon: mdi:chart-timeline-variant 
    name: $upper_devicename Overload
    id: ${low_devicename}_overload
# индикатор ручного режима работы
  - platform: template
    name: $upper_devicename Operation Manual
    id: ${low_devicename}_operation_manual
    #lambda: return{id(store_mode)!=0};
# индикатор состояния реле
  - platform: template
    name: ${upper_devicename} Status Heater 
    id: ${low_devicename}_status_heater
    device_class: heat
    #lambda: return{id(relay).state};
    
light:
# для управления и индикации статуса загрузки
  - platform: status_led
    id: led
    internal: true
    pin: 
      number: GPIO13
      inverted: True

switch:
#свитч рестарта устройства
  - platform: restart
    name: ${upper_devicename} Restart SW
    id: ${low_devicename}_restart_sw
# реле
  - platform: gpio
    pin: GPIO12
    id: relay
    internal: true
    on_turn_on:
       - lambda: id(${low_devicename}_status_heater).publish_state(true);
    on_turn_off:
       - lambda: id(${low_devicename}_status_heater).publish_state(false);
#виртуальная кнопка, переключение режима управления по времени или вручную
  - platform: template
    name: $upper_devicename Auto
    optimistic: true
    id: ${low_devicename}_auto
    icon: 'mdi:refresh-auto'
    turn_on_action:
      - lambda: |-
         if(id(store_mode)) {
            ESP_LOGD("This","Reset manual mode, from switch 'auto'.");
            id(script_revert_manual).execute(); //отключить ручной режим
         }
         id(store_auto)=true;
      - script.execute: script_turn_auto
    turn_off_action:
      - lambda: |-
         if(id(store_mode) && id(script_revert_manual).is_running()==false) {
            ESP_LOGD("This","Reset manual mode, from switch 'auto'.");
            id(script_revert_manual).execute(); //отключить ручной режим
         }
         id(store_auto)=false;
      - script.execute: script_turn_auto
#виртуальная кнопка, для скрытия длинного текста
  - platform: template
    name: $upper_devicename Hide Notes
    optimistic: true
    id: ${low_devicename}_hide_notes
    entity_category: config
    icon: 'mdi:eye-off'
    turn_on_action:
      - script.execute: script_hide_text
    turn_off_action:
      - script.execute: script_show_text

dallas:
#нога 1-wire на ноге SCL
  - pin: GPIO5
    update_interval: 30s

sensor:
#датчик контроля параметров напряжения
  - platform: pzemac
    current:
      name: $upper_devicename Current
      on_value_range:
      # при перегрузке по току 
      - above: 10.0
        then:
        # отключить реле нагревателя
        - switch.turn_off: relay
        # поднять флаг аварии, вывести в лог ошибку по току
        - lambda: |-
           id(${low_devicename}_overload).publish_state(true);
           ESP_LOGE("This","Alarm ! Current %f , overload. All Turn Off", x);
        # переключить переключатель в ручной режим
        - switch.turn_off: ${low_devicename}_auto
        # отключить термостат  
        - lambda: id(script_climat_heat_off).execute();
    voltage:
      name: $upper_devicename Voltage
    energy:
      name: $upper_devicename Energy
    power:
      name: $upper_devicename Power
    frequency:
      name: $upper_devicename Frequency
      icon: 'mdi:periodic-table'
    power_factor:
      name: $upper_devicename Power Factor
    update_interval: 30s
# датчик DALLAS для работы обогревателя
  - platform: dallas
    address: ${dallas_senson_sn}
    id: ${low_devicename}_temperature
    name: $upper_devicename Temperature
#датчик отображающий уровень сигнала Wifi
  - platform: wifi_signal
    name: $upper_devicename Signal
    update_interval: 60s
#время работы устройства после загрузки
  - platform: uptime
    name: ${upper_devicename} Uptime Sensor

number: 
# контролы установки времени включения
  - platform: template
    name: $upper_devicename Change On Minutes
    id: ${low_devicename}_on_minutes
    optimistic: true
    mode: box
    unit_of_measurement: 'm'
    min_value: 0
    max_value: 59
    icon: 'mdi:timer-play-outline'
    step: 1
    on_value: 
      - lambda: |-
          id(script_set_on_time).execute();
  - platform: template
    name: $upper_devicename Change On Hours
    id: ${low_devicename}_on_hours
    optimistic: true
    mode: box
    unit_of_measurement: 'h'
    min_value: 0
    max_value: 23
    step: 1
    icon: 'mdi:timer-play'
    on_value: 
      - lambda: |-
          id(script_set_on_time).execute();
# контролы установки времени выключения
  - platform: template
    name: $upper_devicename Change Off Minutes
    id: ${low_devicename}_off_minutes
    optimistic: true
    mode: box
    unit_of_measurement: 'm'
    min_value: 0
    max_value: 59
    step: 1
    icon: 'mdi:timer-stop-outline'
    on_value: 
      - lambda: |-
          id(script_set_off_time).execute();
  - platform: template
    name: $upper_devicename Change Off Hours
    id: ${low_devicename}_off_hours
    optimistic: true
    mode: box
    unit_of_measurement: 'h'
    min_value: 0
    max_value: 23
    step: 1
    icon: 'mdi:timer-stop'
    on_value: 
      - lambda: |-
          id(script_set_off_time).execute();

#select:
#  - platform: template
#    name: $upper_devicename Select Test
#    id: ${low_devicename}_select_test
#    optimistic: true
#    options:
#      - 'Internal'
#      - 'Floor'

climate:
  # терморегуляция нагрева воды
  - platform: thermostat
    id: ${low_devicename}_termostate
    name: $upper_devicename Water Termostat
    sensor: ${low_devicename}_temperature
    min_idle_time: 10sec
    min_heating_off_time: 10sec
    min_heating_run_time: 10sec
    visual:
      min_temperature: 5
      max_temperature: 90
      temperature_step: 1
    heat_action:
       - switch.turn_on: relay
    idle_action:
       - switch.turn_off: relay

time:
  #нужна синхронизация времени
  - platform: sntp
    id: sntp_time

script:
# процедура проверки настроек и уравления климатом
  - id: script_condition
    then:
      lambda: |-
        if(id(store_auto)){
           uint16_t _now=(id(sntp_time).now().hour)*60+id(sntp_time).now().minute;
           uint16_t start=id(store_on_time);
           uint16_t stop=id(store_off_time);
           //ESP_LOGE("", "start %u, stop %u, _now %u", start, stop, _now);
           if((start>stop && (_now>=start || _now<=stop)) ||
              (start<stop && _now>=start && _now<=stop)){
              if(id(${low_devicename}_termostate).mode!=CLIMATE_MODE_HEAT) {
                 ESP_LOGD("This","Start heating on time, %u:%02u.",_now/60,_now%60);
                 id(script_climat_heat_on).execute();
              }
           } else if(id(${low_devicename}_termostate).mode!=CLIMATE_MODE_OFF){
              ESP_LOGD("This","Stop heating on time, %u:%02u.",_now/60,_now%60);
              id(script_climat_heat_off).execute();
           }
        } else if(id(store_mode)){
           // проверка и корректировка работы в режиме мануал, если условия не соответствуют рабочему режимк
           if(id(${low_devicename}_termostate).mode!=CLIMATE_MODE_HEAT){ // изменили режим работы в процессе ручного управления
              ESP_LOGD("This","Set heating to off in manual mode, manual mode break." );
              id(script_revert_manual).execute(); // вернуть рабочий режим, отключить ручной режим
              id(script_climat_heat_off).execute(); // оставить в выключенном режиме                 
           } else if(id(${low_devicename}_termostate).target_temperature!=${manual_temperature}){ // изменили температуру в ручном режиме
              ESP_LOGD("This","Change temperature in manual mode, manual mode break." );
              uint16_t temp=id(${low_devicename}_termostate).target_temperature;
              id(script_revert_manual).execute(); // вернуть рабочий режим, отключить ручной режим
              id(script_climat_heat_on).execute(); // оставить во включенном режиме
              auto call = id(${low_devicename}_termostate).make_call(); // оставляем установленную температуру
              call.set_target_temperature(temp);
              call.perform();
              id(${low_devicename}_termostate).refresh();
           }
        }
# процедура обработки переключения режимов кнопки AUTO
  - id: script_turn_auto
    then:
      - lambda: |- 
          // сбросить возможно поднятый флаг аварии
          id(${low_devicename}_overload).publish_state(false);
          // сбросить сбросить сохранение для ручного режима
          if(id(store_mode)!=0){
             id(store_mode)=0;
          }
          // сбросить ручной режим
          id(${low_devicename}_operation_manual).publish_state(false);
          // переключить термостат в режим off
          //id(script_climat_heat_off).execute();
          // проверить режим работы и скорректировать его, при необходимости
          id(script_condition).execute();
# процедура публикации большых текстовых кусков, сворачиваем для работы в веб морде
  - id: script_show_text
    then:
     -  lambda: |-
          id(${low_devicename}_location).publish_state("${location}");
          id(${low_devicename}_hardware).publish_state("SonOff Basic(одинарное реле, max 16 Amp) + PZEM-004T-100A(датчик тока и напряжения) + DS18B20(1-wire термометр).");
# процедура публикации большых текстовых кусков, сворачиваем для работы в веб морде
  - id: script_hide_text
    then:
     -  lambda: |-
          id(${low_devicename}_location).publish_state("Turn 'Hide Notes'");
          id(${low_devicename}_hardware).publish_state("Turn 'Hide Notes'");
# процедура включения термостата на нагрева (проверяем флаг аварии, проверяем текущий режим работы, при необходимости включаем нагрев)
  - id: script_climat_heat_on
    then:
     -  lambda: |-
          // только если нет аварийного флага и установлен не режим нагрева
          if(id(${low_devicename}_overload).state==false){
             if(id(${low_devicename}_termostate).mode!=CLIMATE_MODE_HEAT){
                // включить термостат на нагрев
                auto call = id(${low_devicename}_termostate).make_call();
                call.set_mode("HEAT");
                call.perform();
                id(${low_devicename}_termostate).refresh();
            }
          } 
# процедура выключения термостата
  - id: script_climat_heat_off
    then:
     -  lambda: |-
         if(id(${low_devicename}_termostate).mode!=CLIMATE_MODE_OFF){
             auto call = id(${low_devicename}_termostate).make_call();
             call.set_mode("OFF");
             call.perform();
             id(${low_devicename}_termostate).refresh();
          }
# процедура установки и сохранения времени старта работы термостата
  - id: script_set_on_time
    then:
     - lambda: |-
          // посчитать значение запуска и сохранить его
          uint16_t temp=((uint16_t)(id(${low_devicename}_on_hours).state)*60)+(int16_t)(id(${low_devicename}_on_minutes).state);
          id(store_on_time)=temp;
          // обработать работу термостата
          id(script_condition).execute();
# процедура установки и сохранения времени окончании работы термостата
  - id: script_set_off_time
    then:
     - lambda: |-
          // посчитать значение останова и сохранить его запуска
          uint16_t temp=((uint16_t)(id(${low_devicename}_off_hours).state)*60)+(int16_t)(id(${low_devicename}_off_minutes).state);
          id(store_off_time)=temp;
          // обработать работу термостата
          id(script_condition).execute();
# процедура включения ручного режима
  - id: script_set_manual
    then:
     - lambda: |-
         uint8_t temp=0;
         if(id(store_auto)){ // режим авто - включен
            temp=1; // запоминаем, что был режим работы по времени 
         } else {
            if(id(${low_devicename}_termostate).mode==CLIMATE_MODE_HEAT){
               // запоминаем, что был ручной режим работы с включеным термостатом и целевую температуру
               temp=100+(int)(id(${low_devicename}_termostate).target_temperature); 
            } else {
               temp=2; // запоминаем, что был ручной режим работы с вЫключеным термостатом
            }
         }
         id(${low_devicename}_auto).turn_off(); // отключаем автоматический режим
         auto call = id(${low_devicename}_termostate).make_call(); // температура в ручном режиме
         call.set_target_temperature(${manual_temperature});
         call.perform();
         id(${low_devicename}_termostate).refresh();
         id(script_climat_heat_on).execute(); // включаем нагрев
         id(store_mode)=temp;
         id(script_condition).execute();
         id(${low_devicename}_operation_manual).publish_state(true);
# процедура включения ручного режима
  - id: script_revert_manual
    then:
     - lambda: |-
         if(id(store_mode)==1){ // был установлен режим работы по времени
            id(${low_devicename}_auto).turn_on(); 
         } else if(id(store_mode)==2){ // был установлен ручной режим c вЫключенным нагревом
            id(${low_devicename}_auto).turn_off();
            id(script_climat_heat_off).execute();
         } else { // был установлен ручной режим c включенным нагревом
            if(id(store_mode)>100){
               auto call = id(${low_devicename}_termostate).make_call(); // температура в ручном режиме
               call.set_target_temperature(id(store_mode)-100);
               call.perform();
               id(${low_devicename}_termostate).refresh();
            }
            id(${low_devicename}_auto).turn_off();
            id(script_climat_heat_on).execute();
         }
         id(store_mode)=0;
         id(script_condition).execute();
         id(${low_devicename}_operation_manual).publish_state(false);

interval:
  - interval: 30sec
    then:
      # каждую минуту проверяем правильность режима работы
      - script.execute: script_condition
  - interval: 1sec
    then:
       # индикация ручного режима работы, мигаем синим.
       lambda: |-
          if(id(${low_devicename}_overload).state){
             if(id(script_climat_heat_off).is_running()==false){
                id(script_climat_heat_off).execute();
             }
          }
          static uint8_t blink=3;
          if(id(store_mode)!=0){ // режим с нажатой кнопкой, НЕ мигаем, срет в лог :(
             if(blink!=1){
                auto call = id(led).turn_on();
                call.perform();
                blink=1;
             //} else {
             //   auto call = id(led).turn_off();
             //   call.perform();
             //   blink=0;
             }             
          } else {
             if(blink!=0){
                auto call = id(led).turn_off();
                call.perform();
                blink=0;
             }
          }
      
text_sensor:
#версия прошивки
  - platform: version
    name: $upper_devicename ESPHome Version
#текстовая форма uptime    
  - platform: template
    name: ${upper_devicename} Uptime
    entity_category: diagnostic
    icon: 'mdi:timer'
    lambda: |-
      uint32_t dur=millis()/1000;
      char buffer[19];
      if(dur>=86400) sprintf(buffer,"%ud %uh %02um %02us", dur/86400, dur%86400/3600, dur%3600/60, dur%60);
      else if(dur>=3600) sprintf(buffer,"%uh %02um %02us", dur/3600, dur%3600/60, dur%60);
      else sprintf(buffer,"%um %02us", dur/60, dur%60);
      return {buffer};
#локализация устройства, скрывается на 10 минут при настройке времени работы девайса, так удобно для инета
  - platform: template
    name: ${upper_devicename} Location
    entity_category: diagnostic
    id: ${low_devicename}_location
    icon: 'mdi:map-marker-radius'
#железо устройства (на основе чего сделано), скрывается на 10 минут при настройке времени работы девайса, так удобно для инета
  - platform: template
    name: ${upper_devicename} Hardware
    entity_category: diagnostic
    id: ${low_devicename}_hardware
    icon: 'mdi:saw-blade'
#точка подключения Wifi
  - platform: wifi_info
    ssid:
      name: ${upper_devicename} Connected SSID
    bssid:
      name: ${upper_devicename} Connected BSSID 
